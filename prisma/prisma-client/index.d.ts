// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  event: (where?: EventWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  patrol: (where?: PatrolWhereInput) => Promise<boolean>;
  troop: (where?: TroopWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  locations: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Location>;
  locationsConnection: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LocationConnectionPromise;
  patrol: (where: PatrolWhereUniqueInput) => PatrolNullablePromise;
  patrols: (args?: {
    where?: PatrolWhereInput;
    orderBy?: PatrolOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Patrol>;
  patrolsConnection: (args?: {
    where?: PatrolWhereInput;
    orderBy?: PatrolOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PatrolConnectionPromise;
  troop: (where: TroopWhereUniqueInput) => TroopNullablePromise;
  troops: (args?: {
    where?: TroopWhereInput;
    orderBy?: TroopOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Troop>;
  troopsConnection: (args?: {
    where?: TroopWhereInput;
    orderBy?: TroopOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TroopConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateManyLocations: (args: {
    data: LocationUpdateManyMutationInput;
    where?: LocationWhereInput;
  }) => BatchPayloadPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createPatrol: (data: PatrolCreateInput) => PatrolPromise;
  updatePatrol: (args: {
    data: PatrolUpdateInput;
    where: PatrolWhereUniqueInput;
  }) => PatrolPromise;
  updateManyPatrols: (args: {
    data: PatrolUpdateManyMutationInput;
    where?: PatrolWhereInput;
  }) => BatchPayloadPromise;
  upsertPatrol: (args: {
    where: PatrolWhereUniqueInput;
    create: PatrolCreateInput;
    update: PatrolUpdateInput;
  }) => PatrolPromise;
  deletePatrol: (where: PatrolWhereUniqueInput) => PatrolPromise;
  deleteManyPatrols: (where?: PatrolWhereInput) => BatchPayloadPromise;
  createTroop: (data: TroopCreateInput) => TroopPromise;
  updateTroop: (args: {
    data: TroopUpdateInput;
    where: TroopWhereUniqueInput;
  }) => TroopPromise;
  updateManyTroops: (args: {
    data: TroopUpdateManyMutationInput;
    where?: TroopWhereInput;
  }) => BatchPayloadPromise;
  upsertTroop: (args: {
    where: TroopWhereUniqueInput;
    create: TroopCreateInput;
    update: TroopUpdateInput;
  }) => TroopPromise;
  deleteTroop: (where: TroopWhereUniqueInput) => TroopPromise;
  deleteManyTroops: (where?: TroopWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  patrol: (
    where?: PatrolSubscriptionWhereInput
  ) => PatrolSubscriptionPayloadSubscription;
  troop: (
    where?: TroopSubscriptionWhereInput
  ) => TroopSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type WEEK_DAY =
  | "SUNDAY"
  | "MONDAY"
  | "TUESDAY"
  | "WEDNESDAY"
  | "THURSDAY"
  | "FRIDAY"
  | "SATURDAY";

export type ROLE =
  | "SCOUT_MASTER"
  | "SR_PATROL_LEADER"
  | "PATROL_LEADER"
  | "SCOUT"
  | "PARENT";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "role_ASC"
  | "role_DESC";

export type PatrolOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "date_ASC"
  | "date_DESC"
  | "time_ASC"
  | "time_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "recurring_ASC"
  | "recurring_DESC"
  | "day_ASC"
  | "day_DESC"
  | "distance_ASC"
  | "distance_DESC"
  | "published_ASC"
  | "published_DESC";

export type LocationOrderByInput =
  | "lat_ASC"
  | "lat_DESC"
  | "lng_ASC"
  | "lng_DESC";

export type TroopOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "council_ASC"
  | "council_DESC"
  | "state_ASC"
  | "state_DESC"
  | "unitNumber_ASC"
  | "unitNumber_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  birthday?: Maybe<String>;
  birthday_not?: Maybe<String>;
  birthday_in?: Maybe<String[] | String>;
  birthday_not_in?: Maybe<String[] | String>;
  birthday_lt?: Maybe<String>;
  birthday_lte?: Maybe<String>;
  birthday_gt?: Maybe<String>;
  birthday_gte?: Maybe<String>;
  birthday_contains?: Maybe<String>;
  birthday_not_contains?: Maybe<String>;
  birthday_starts_with?: Maybe<String>;
  birthday_not_starts_with?: Maybe<String>;
  birthday_ends_with?: Maybe<String>;
  birthday_not_ends_with?: Maybe<String>;
  troop?: Maybe<TroopWhereInput>;
  patrol?: Maybe<PatrolWhereInput>;
  role?: Maybe<ROLE>;
  role_not?: Maybe<ROLE>;
  role_in?: Maybe<ROLE[] | ROLE>;
  role_not_in?: Maybe<ROLE[] | ROLE>;
  events_every?: Maybe<EventWhereInput>;
  events_some?: Maybe<EventWhereInput>;
  events_none?: Maybe<EventWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface TroopWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  council?: Maybe<String>;
  council_not?: Maybe<String>;
  council_in?: Maybe<String[] | String>;
  council_not_in?: Maybe<String[] | String>;
  council_lt?: Maybe<String>;
  council_lte?: Maybe<String>;
  council_gt?: Maybe<String>;
  council_gte?: Maybe<String>;
  council_contains?: Maybe<String>;
  council_not_contains?: Maybe<String>;
  council_starts_with?: Maybe<String>;
  council_not_starts_with?: Maybe<String>;
  council_ends_with?: Maybe<String>;
  council_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  unitNumber?: Maybe<Int>;
  unitNumber_not?: Maybe<Int>;
  unitNumber_in?: Maybe<Int[] | Int>;
  unitNumber_not_in?: Maybe<Int[] | Int>;
  unitNumber_lt?: Maybe<Int>;
  unitNumber_lte?: Maybe<Int>;
  unitNumber_gt?: Maybe<Int>;
  unitNumber_gte?: Maybe<Int>;
  patrols_every?: Maybe<PatrolWhereInput>;
  patrols_some?: Maybe<PatrolWhereInput>;
  patrols_none?: Maybe<PatrolWhereInput>;
  events_every?: Maybe<EventWhereInput>;
  events_some?: Maybe<EventWhereInput>;
  events_none?: Maybe<EventWhereInput>;
  AND?: Maybe<TroopWhereInput[] | TroopWhereInput>;
  OR?: Maybe<TroopWhereInput[] | TroopWhereInput>;
  NOT?: Maybe<TroopWhereInput[] | TroopWhereInput>;
}

export interface PatrolWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  members_every?: Maybe<UserWhereInput>;
  members_some?: Maybe<UserWhereInput>;
  members_none?: Maybe<UserWhereInput>;
  events_every?: Maybe<EventWhereInput>;
  events_some?: Maybe<EventWhereInput>;
  events_none?: Maybe<EventWhereInput>;
  AND?: Maybe<PatrolWhereInput[] | PatrolWhereInput>;
  OR?: Maybe<PatrolWhereInput[] | PatrolWhereInput>;
  NOT?: Maybe<PatrolWhereInput[] | PatrolWhereInput>;
}

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  patrol?: Maybe<PatrolWhereInput>;
  troop?: Maybe<TroopWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  time_not?: Maybe<DateTimeInput>;
  time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_lt?: Maybe<DateTimeInput>;
  time_lte?: Maybe<DateTimeInput>;
  time_gt?: Maybe<DateTimeInput>;
  time_gte?: Maybe<DateTimeInput>;
  location?: Maybe<LocationWhereInput>;
  meetLocation?: Maybe<LocationWhereInput>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  recurring?: Maybe<Boolean>;
  recurring_not?: Maybe<Boolean>;
  day?: Maybe<WEEK_DAY>;
  day_not?: Maybe<WEEK_DAY>;
  day_in?: Maybe<WEEK_DAY[] | WEEK_DAY>;
  day_not_in?: Maybe<WEEK_DAY[] | WEEK_DAY>;
  distance?: Maybe<Int>;
  distance_not?: Maybe<Int>;
  distance_in?: Maybe<Int[] | Int>;
  distance_not_in?: Maybe<Int[] | Int>;
  distance_lt?: Maybe<Int>;
  distance_lte?: Maybe<Int>;
  distance_gt?: Maybe<Int>;
  distance_gte?: Maybe<Int>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  owner?: Maybe<UserWhereInput>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface LocationWhereInput {
  lat?: Maybe<Float>;
  lat_not?: Maybe<Float>;
  lat_in?: Maybe<Float[] | Float>;
  lat_not_in?: Maybe<Float[] | Float>;
  lat_lt?: Maybe<Float>;
  lat_lte?: Maybe<Float>;
  lat_gt?: Maybe<Float>;
  lat_gte?: Maybe<Float>;
  lng?: Maybe<Float>;
  lng_not?: Maybe<Float>;
  lng_in?: Maybe<Float[] | Float>;
  lng_not_in?: Maybe<Float[] | Float>;
  lng_lt?: Maybe<Float>;
  lng_lte?: Maybe<Float>;
  lng_gt?: Maybe<Float>;
  lng_gte?: Maybe<Float>;
  AND?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  OR?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  NOT?: Maybe<LocationWhereInput[] | LocationWhereInput>;
}

export type PatrolWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TroopWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  type: String;
  patrol?: Maybe<PatrolCreateOneWithoutEventsInput>;
  troop?: Maybe<TroopCreateOneWithoutEventsInput>;
  title: String;
  description?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  location?: Maybe<LocationCreateOneInput>;
  meetLocation?: Maybe<LocationCreateOneInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  recurring?: Maybe<Boolean>;
  day?: Maybe<WEEK_DAY>;
  distance?: Maybe<Int>;
  published?: Maybe<Boolean>;
  owner: UserCreateOneWithoutEventsInput;
}

export interface PatrolCreateOneWithoutEventsInput {
  create?: Maybe<PatrolCreateWithoutEventsInput>;
  connect?: Maybe<PatrolWhereUniqueInput>;
}

export interface PatrolCreateWithoutEventsInput {
  id?: Maybe<ID_Input>;
  name: String;
  members?: Maybe<UserCreateManyWithoutPatrolInput>;
}

export interface UserCreateManyWithoutPatrolInput {
  create?: Maybe<UserCreateWithoutPatrolInput[] | UserCreateWithoutPatrolInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutPatrolInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  phone?: Maybe<String>;
  birthday?: Maybe<String>;
  troop?: Maybe<TroopCreateOneInput>;
  role?: Maybe<ROLE>;
  events?: Maybe<EventCreateManyWithoutOwnerInput>;
}

export interface TroopCreateOneInput {
  create?: Maybe<TroopCreateInput>;
  connect?: Maybe<TroopWhereUniqueInput>;
}

export interface TroopCreateInput {
  id?: Maybe<ID_Input>;
  council: String;
  state: String;
  unitNumber?: Maybe<Int>;
  patrols?: Maybe<PatrolCreateManyInput>;
  events?: Maybe<EventCreateManyWithoutTroopInput>;
}

export interface PatrolCreateManyInput {
  create?: Maybe<PatrolCreateInput[] | PatrolCreateInput>;
  connect?: Maybe<PatrolWhereUniqueInput[] | PatrolWhereUniqueInput>;
}

export interface PatrolCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  members?: Maybe<UserCreateManyWithoutPatrolInput>;
  events?: Maybe<EventCreateManyWithoutPatrolInput>;
}

export interface EventCreateManyWithoutPatrolInput {
  create?: Maybe<
    EventCreateWithoutPatrolInput[] | EventCreateWithoutPatrolInput
  >;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface EventCreateWithoutPatrolInput {
  id?: Maybe<ID_Input>;
  type: String;
  troop?: Maybe<TroopCreateOneWithoutEventsInput>;
  title: String;
  description?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  location?: Maybe<LocationCreateOneInput>;
  meetLocation?: Maybe<LocationCreateOneInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  recurring?: Maybe<Boolean>;
  day?: Maybe<WEEK_DAY>;
  distance?: Maybe<Int>;
  published?: Maybe<Boolean>;
  owner: UserCreateOneWithoutEventsInput;
}

export interface TroopCreateOneWithoutEventsInput {
  create?: Maybe<TroopCreateWithoutEventsInput>;
  connect?: Maybe<TroopWhereUniqueInput>;
}

export interface TroopCreateWithoutEventsInput {
  id?: Maybe<ID_Input>;
  council: String;
  state: String;
  unitNumber?: Maybe<Int>;
  patrols?: Maybe<PatrolCreateManyInput>;
}

export interface LocationCreateOneInput {
  create?: Maybe<LocationCreateInput>;
}

export interface LocationCreateInput {
  lat: Float;
  lng: Float;
}

export interface UserCreateOneWithoutEventsInput {
  create?: Maybe<UserCreateWithoutEventsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutEventsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  phone?: Maybe<String>;
  birthday?: Maybe<String>;
  troop?: Maybe<TroopCreateOneInput>;
  patrol?: Maybe<PatrolCreateOneWithoutMembersInput>;
  role?: Maybe<ROLE>;
}

export interface PatrolCreateOneWithoutMembersInput {
  create?: Maybe<PatrolCreateWithoutMembersInput>;
  connect?: Maybe<PatrolWhereUniqueInput>;
}

export interface PatrolCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  name: String;
  events?: Maybe<EventCreateManyWithoutPatrolInput>;
}

export interface EventCreateManyWithoutTroopInput {
  create?: Maybe<EventCreateWithoutTroopInput[] | EventCreateWithoutTroopInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface EventCreateWithoutTroopInput {
  id?: Maybe<ID_Input>;
  type: String;
  patrol?: Maybe<PatrolCreateOneWithoutEventsInput>;
  title: String;
  description?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  location?: Maybe<LocationCreateOneInput>;
  meetLocation?: Maybe<LocationCreateOneInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  recurring?: Maybe<Boolean>;
  day?: Maybe<WEEK_DAY>;
  distance?: Maybe<Int>;
  published?: Maybe<Boolean>;
  owner: UserCreateOneWithoutEventsInput;
}

export interface EventCreateManyWithoutOwnerInput {
  create?: Maybe<EventCreateWithoutOwnerInput[] | EventCreateWithoutOwnerInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface EventCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  type: String;
  patrol?: Maybe<PatrolCreateOneWithoutEventsInput>;
  troop?: Maybe<TroopCreateOneWithoutEventsInput>;
  title: String;
  description?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  location?: Maybe<LocationCreateOneInput>;
  meetLocation?: Maybe<LocationCreateOneInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  recurring?: Maybe<Boolean>;
  day?: Maybe<WEEK_DAY>;
  distance?: Maybe<Int>;
  published?: Maybe<Boolean>;
}

export interface EventUpdateInput {
  type?: Maybe<String>;
  patrol?: Maybe<PatrolUpdateOneWithoutEventsInput>;
  troop?: Maybe<TroopUpdateOneWithoutEventsInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  location?: Maybe<LocationUpdateOneInput>;
  meetLocation?: Maybe<LocationUpdateOneInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  recurring?: Maybe<Boolean>;
  day?: Maybe<WEEK_DAY>;
  distance?: Maybe<Int>;
  published?: Maybe<Boolean>;
  owner?: Maybe<UserUpdateOneRequiredWithoutEventsInput>;
}

export interface PatrolUpdateOneWithoutEventsInput {
  create?: Maybe<PatrolCreateWithoutEventsInput>;
  update?: Maybe<PatrolUpdateWithoutEventsDataInput>;
  upsert?: Maybe<PatrolUpsertWithoutEventsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PatrolWhereUniqueInput>;
}

export interface PatrolUpdateWithoutEventsDataInput {
  name?: Maybe<String>;
  members?: Maybe<UserUpdateManyWithoutPatrolInput>;
}

export interface UserUpdateManyWithoutPatrolInput {
  create?: Maybe<UserCreateWithoutPatrolInput[] | UserCreateWithoutPatrolInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutPatrolInput[]
    | UserUpdateWithWhereUniqueWithoutPatrolInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutPatrolInput[]
    | UserUpsertWithWhereUniqueWithoutPatrolInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutPatrolInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutPatrolDataInput;
}

export interface UserUpdateWithoutPatrolDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  birthday?: Maybe<String>;
  troop?: Maybe<TroopUpdateOneInput>;
  role?: Maybe<ROLE>;
  events?: Maybe<EventUpdateManyWithoutOwnerInput>;
}

export interface TroopUpdateOneInput {
  create?: Maybe<TroopCreateInput>;
  update?: Maybe<TroopUpdateDataInput>;
  upsert?: Maybe<TroopUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TroopWhereUniqueInput>;
}

export interface TroopUpdateDataInput {
  council?: Maybe<String>;
  state?: Maybe<String>;
  unitNumber?: Maybe<Int>;
  patrols?: Maybe<PatrolUpdateManyInput>;
  events?: Maybe<EventUpdateManyWithoutTroopInput>;
}

export interface PatrolUpdateManyInput {
  create?: Maybe<PatrolCreateInput[] | PatrolCreateInput>;
  update?: Maybe<
    | PatrolUpdateWithWhereUniqueNestedInput[]
    | PatrolUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PatrolUpsertWithWhereUniqueNestedInput[]
    | PatrolUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<PatrolWhereUniqueInput[] | PatrolWhereUniqueInput>;
  connect?: Maybe<PatrolWhereUniqueInput[] | PatrolWhereUniqueInput>;
  set?: Maybe<PatrolWhereUniqueInput[] | PatrolWhereUniqueInput>;
  disconnect?: Maybe<PatrolWhereUniqueInput[] | PatrolWhereUniqueInput>;
  deleteMany?: Maybe<PatrolScalarWhereInput[] | PatrolScalarWhereInput>;
  updateMany?: Maybe<
    | PatrolUpdateManyWithWhereNestedInput[]
    | PatrolUpdateManyWithWhereNestedInput
  >;
}

export interface PatrolUpdateWithWhereUniqueNestedInput {
  where: PatrolWhereUniqueInput;
  data: PatrolUpdateDataInput;
}

export interface PatrolUpdateDataInput {
  name?: Maybe<String>;
  members?: Maybe<UserUpdateManyWithoutPatrolInput>;
  events?: Maybe<EventUpdateManyWithoutPatrolInput>;
}

export interface EventUpdateManyWithoutPatrolInput {
  create?: Maybe<
    EventCreateWithoutPatrolInput[] | EventCreateWithoutPatrolInput
  >;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueWithoutPatrolInput[]
    | EventUpdateWithWhereUniqueWithoutPatrolInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueWithoutPatrolInput[]
    | EventUpsertWithWhereUniqueWithoutPatrolInput
  >;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface EventUpdateWithWhereUniqueWithoutPatrolInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutPatrolDataInput;
}

export interface EventUpdateWithoutPatrolDataInput {
  type?: Maybe<String>;
  troop?: Maybe<TroopUpdateOneWithoutEventsInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  location?: Maybe<LocationUpdateOneInput>;
  meetLocation?: Maybe<LocationUpdateOneInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  recurring?: Maybe<Boolean>;
  day?: Maybe<WEEK_DAY>;
  distance?: Maybe<Int>;
  published?: Maybe<Boolean>;
  owner?: Maybe<UserUpdateOneRequiredWithoutEventsInput>;
}

export interface TroopUpdateOneWithoutEventsInput {
  create?: Maybe<TroopCreateWithoutEventsInput>;
  update?: Maybe<TroopUpdateWithoutEventsDataInput>;
  upsert?: Maybe<TroopUpsertWithoutEventsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TroopWhereUniqueInput>;
}

export interface TroopUpdateWithoutEventsDataInput {
  council?: Maybe<String>;
  state?: Maybe<String>;
  unitNumber?: Maybe<Int>;
  patrols?: Maybe<PatrolUpdateManyInput>;
}

export interface TroopUpsertWithoutEventsInput {
  update: TroopUpdateWithoutEventsDataInput;
  create: TroopCreateWithoutEventsInput;
}

export interface LocationUpdateOneInput {
  create?: Maybe<LocationCreateInput>;
  update?: Maybe<LocationUpdateDataInput>;
  upsert?: Maybe<LocationUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
}

export interface LocationUpdateDataInput {
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
}

export interface LocationUpsertNestedInput {
  update: LocationUpdateDataInput;
  create: LocationCreateInput;
}

export interface UserUpdateOneRequiredWithoutEventsInput {
  create?: Maybe<UserCreateWithoutEventsInput>;
  update?: Maybe<UserUpdateWithoutEventsDataInput>;
  upsert?: Maybe<UserUpsertWithoutEventsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutEventsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  birthday?: Maybe<String>;
  troop?: Maybe<TroopUpdateOneInput>;
  patrol?: Maybe<PatrolUpdateOneWithoutMembersInput>;
  role?: Maybe<ROLE>;
}

export interface PatrolUpdateOneWithoutMembersInput {
  create?: Maybe<PatrolCreateWithoutMembersInput>;
  update?: Maybe<PatrolUpdateWithoutMembersDataInput>;
  upsert?: Maybe<PatrolUpsertWithoutMembersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PatrolWhereUniqueInput>;
}

export interface PatrolUpdateWithoutMembersDataInput {
  name?: Maybe<String>;
  events?: Maybe<EventUpdateManyWithoutPatrolInput>;
}

export interface PatrolUpsertWithoutMembersInput {
  update: PatrolUpdateWithoutMembersDataInput;
  create: PatrolCreateWithoutMembersInput;
}

export interface UserUpsertWithoutEventsInput {
  update: UserUpdateWithoutEventsDataInput;
  create: UserCreateWithoutEventsInput;
}

export interface EventUpsertWithWhereUniqueWithoutPatrolInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutPatrolDataInput;
  create: EventCreateWithoutPatrolInput;
}

export interface EventScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  time_not?: Maybe<DateTimeInput>;
  time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_lt?: Maybe<DateTimeInput>;
  time_lte?: Maybe<DateTimeInput>;
  time_gt?: Maybe<DateTimeInput>;
  time_gte?: Maybe<DateTimeInput>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  recurring?: Maybe<Boolean>;
  recurring_not?: Maybe<Boolean>;
  day?: Maybe<WEEK_DAY>;
  day_not?: Maybe<WEEK_DAY>;
  day_in?: Maybe<WEEK_DAY[] | WEEK_DAY>;
  day_not_in?: Maybe<WEEK_DAY[] | WEEK_DAY>;
  distance?: Maybe<Int>;
  distance_not?: Maybe<Int>;
  distance_in?: Maybe<Int[] | Int>;
  distance_not_in?: Maybe<Int[] | Int>;
  distance_lt?: Maybe<Int>;
  distance_lte?: Maybe<Int>;
  distance_gt?: Maybe<Int>;
  distance_gte?: Maybe<Int>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  AND?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  OR?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  NOT?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
}

export interface EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput;
  data: EventUpdateManyDataInput;
}

export interface EventUpdateManyDataInput {
  type?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  recurring?: Maybe<Boolean>;
  day?: Maybe<WEEK_DAY>;
  distance?: Maybe<Int>;
  published?: Maybe<Boolean>;
}

export interface PatrolUpsertWithWhereUniqueNestedInput {
  where: PatrolWhereUniqueInput;
  update: PatrolUpdateDataInput;
  create: PatrolCreateInput;
}

export interface PatrolScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<PatrolScalarWhereInput[] | PatrolScalarWhereInput>;
  OR?: Maybe<PatrolScalarWhereInput[] | PatrolScalarWhereInput>;
  NOT?: Maybe<PatrolScalarWhereInput[] | PatrolScalarWhereInput>;
}

export interface PatrolUpdateManyWithWhereNestedInput {
  where: PatrolScalarWhereInput;
  data: PatrolUpdateManyDataInput;
}

export interface PatrolUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface EventUpdateManyWithoutTroopInput {
  create?: Maybe<EventCreateWithoutTroopInput[] | EventCreateWithoutTroopInput>;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueWithoutTroopInput[]
    | EventUpdateWithWhereUniqueWithoutTroopInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueWithoutTroopInput[]
    | EventUpsertWithWhereUniqueWithoutTroopInput
  >;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface EventUpdateWithWhereUniqueWithoutTroopInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutTroopDataInput;
}

export interface EventUpdateWithoutTroopDataInput {
  type?: Maybe<String>;
  patrol?: Maybe<PatrolUpdateOneWithoutEventsInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  location?: Maybe<LocationUpdateOneInput>;
  meetLocation?: Maybe<LocationUpdateOneInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  recurring?: Maybe<Boolean>;
  day?: Maybe<WEEK_DAY>;
  distance?: Maybe<Int>;
  published?: Maybe<Boolean>;
  owner?: Maybe<UserUpdateOneRequiredWithoutEventsInput>;
}

export interface EventUpsertWithWhereUniqueWithoutTroopInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutTroopDataInput;
  create: EventCreateWithoutTroopInput;
}

export interface TroopUpsertNestedInput {
  update: TroopUpdateDataInput;
  create: TroopCreateInput;
}

export interface EventUpdateManyWithoutOwnerInput {
  create?: Maybe<EventCreateWithoutOwnerInput[] | EventCreateWithoutOwnerInput>;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueWithoutOwnerInput[]
    | EventUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueWithoutOwnerInput[]
    | EventUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface EventUpdateWithWhereUniqueWithoutOwnerInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutOwnerDataInput;
}

export interface EventUpdateWithoutOwnerDataInput {
  type?: Maybe<String>;
  patrol?: Maybe<PatrolUpdateOneWithoutEventsInput>;
  troop?: Maybe<TroopUpdateOneWithoutEventsInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  location?: Maybe<LocationUpdateOneInput>;
  meetLocation?: Maybe<LocationUpdateOneInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  recurring?: Maybe<Boolean>;
  day?: Maybe<WEEK_DAY>;
  distance?: Maybe<Int>;
  published?: Maybe<Boolean>;
}

export interface EventUpsertWithWhereUniqueWithoutOwnerInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutOwnerDataInput;
  create: EventCreateWithoutOwnerInput;
}

export interface UserUpsertWithWhereUniqueWithoutPatrolInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutPatrolDataInput;
  create: UserCreateWithoutPatrolInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  birthday?: Maybe<String>;
  birthday_not?: Maybe<String>;
  birthday_in?: Maybe<String[] | String>;
  birthday_not_in?: Maybe<String[] | String>;
  birthday_lt?: Maybe<String>;
  birthday_lte?: Maybe<String>;
  birthday_gt?: Maybe<String>;
  birthday_gte?: Maybe<String>;
  birthday_contains?: Maybe<String>;
  birthday_not_contains?: Maybe<String>;
  birthday_starts_with?: Maybe<String>;
  birthday_not_starts_with?: Maybe<String>;
  birthday_ends_with?: Maybe<String>;
  birthday_not_ends_with?: Maybe<String>;
  role?: Maybe<ROLE>;
  role_not?: Maybe<ROLE>;
  role_in?: Maybe<ROLE[] | ROLE>;
  role_not_in?: Maybe<ROLE[] | ROLE>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  birthday?: Maybe<String>;
  role?: Maybe<ROLE>;
}

export interface PatrolUpsertWithoutEventsInput {
  update: PatrolUpdateWithoutEventsDataInput;
  create: PatrolCreateWithoutEventsInput;
}

export interface EventUpdateManyMutationInput {
  type?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  recurring?: Maybe<Boolean>;
  day?: Maybe<WEEK_DAY>;
  distance?: Maybe<Int>;
  published?: Maybe<Boolean>;
}

export interface LocationUpdateManyMutationInput {
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
}

export interface PatrolUpdateInput {
  name?: Maybe<String>;
  members?: Maybe<UserUpdateManyWithoutPatrolInput>;
  events?: Maybe<EventUpdateManyWithoutPatrolInput>;
}

export interface PatrolUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface TroopUpdateInput {
  council?: Maybe<String>;
  state?: Maybe<String>;
  unitNumber?: Maybe<Int>;
  patrols?: Maybe<PatrolUpdateManyInput>;
  events?: Maybe<EventUpdateManyWithoutTroopInput>;
}

export interface TroopUpdateManyMutationInput {
  council?: Maybe<String>;
  state?: Maybe<String>;
  unitNumber?: Maybe<Int>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  phone?: Maybe<String>;
  birthday?: Maybe<String>;
  troop?: Maybe<TroopCreateOneInput>;
  patrol?: Maybe<PatrolCreateOneWithoutMembersInput>;
  role?: Maybe<ROLE>;
  events?: Maybe<EventCreateManyWithoutOwnerInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  birthday?: Maybe<String>;
  troop?: Maybe<TroopUpdateOneInput>;
  patrol?: Maybe<PatrolUpdateOneWithoutMembersInput>;
  role?: Maybe<ROLE>;
  events?: Maybe<EventUpdateManyWithoutOwnerInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  birthday?: Maybe<String>;
  role?: Maybe<ROLE>;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LocationWhereInput>;
  AND?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
  OR?: Maybe<LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput>;
  NOT?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
}

export interface PatrolSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PatrolWhereInput>;
  AND?: Maybe<PatrolSubscriptionWhereInput[] | PatrolSubscriptionWhereInput>;
  OR?: Maybe<PatrolSubscriptionWhereInput[] | PatrolSubscriptionWhereInput>;
  NOT?: Maybe<PatrolSubscriptionWhereInput[] | PatrolSubscriptionWhereInput>;
}

export interface TroopSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TroopWhereInput>;
  AND?: Maybe<TroopSubscriptionWhereInput[] | TroopSubscriptionWhereInput>;
  OR?: Maybe<TroopSubscriptionWhereInput[] | TroopSubscriptionWhereInput>;
  NOT?: Maybe<TroopSubscriptionWhereInput[] | TroopSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Event {
  id: ID_Output;
  type: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  description?: String;
  date?: DateTimeOutput;
  time?: DateTimeOutput;
  startDate?: DateTimeOutput;
  endDate?: DateTimeOutput;
  recurring?: Boolean;
  day?: WEEK_DAY;
  distance?: Int;
  published: Boolean;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  patrol: <T = PatrolPromise>() => T;
  troop: <T = TroopPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  time: () => Promise<DateTimeOutput>;
  location: <T = LocationPromise>() => T;
  meetLocation: <T = LocationPromise>() => T;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  recurring: () => Promise<Boolean>;
  day: () => Promise<WEEK_DAY>;
  distance: () => Promise<Int>;
  published: () => Promise<Boolean>;
  owner: <T = UserPromise>() => T;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  patrol: <T = PatrolSubscription>() => T;
  troop: <T = TroopSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
  location: <T = LocationSubscription>() => T;
  meetLocation: <T = LocationSubscription>() => T;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  recurring: () => Promise<AsyncIterator<Boolean>>;
  day: () => Promise<AsyncIterator<WEEK_DAY>>;
  distance: () => Promise<AsyncIterator<Int>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  owner: <T = UserSubscription>() => T;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  patrol: <T = PatrolPromise>() => T;
  troop: <T = TroopPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  time: () => Promise<DateTimeOutput>;
  location: <T = LocationPromise>() => T;
  meetLocation: <T = LocationPromise>() => T;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  recurring: () => Promise<Boolean>;
  day: () => Promise<WEEK_DAY>;
  distance: () => Promise<Int>;
  published: () => Promise<Boolean>;
  owner: <T = UserPromise>() => T;
}

export interface Patrol {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface PatrolPromise extends Promise<Patrol>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PatrolSubscription
  extends Promise<AsyncIterator<Patrol>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PatrolNullablePromise
  extends Promise<Patrol | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  email: String;
  password: String;
  phone?: String;
  birthday?: String;
  role?: ROLE;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  birthday: () => Promise<String>;
  troop: <T = TroopPromise>() => T;
  patrol: <T = PatrolPromise>() => T;
  role: () => Promise<ROLE>;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<String>>;
  troop: <T = TroopSubscription>() => T;
  patrol: <T = PatrolSubscription>() => T;
  role: () => Promise<AsyncIterator<ROLE>>;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  birthday: () => Promise<String>;
  troop: <T = TroopPromise>() => T;
  patrol: <T = PatrolPromise>() => T;
  role: () => Promise<ROLE>;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Troop {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  council: String;
  state: String;
  unitNumber?: Int;
}

export interface TroopPromise extends Promise<Troop>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  council: () => Promise<String>;
  state: () => Promise<String>;
  unitNumber: () => Promise<Int>;
  patrols: <T = FragmentableArray<Patrol>>(args?: {
    where?: PatrolWhereInput;
    orderBy?: PatrolOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TroopSubscription
  extends Promise<AsyncIterator<Troop>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  council: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  unitNumber: () => Promise<AsyncIterator<Int>>;
  patrols: <T = Promise<AsyncIterator<PatrolSubscription>>>(args?: {
    where?: PatrolWhereInput;
    orderBy?: PatrolOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TroopNullablePromise
  extends Promise<Troop | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  council: () => Promise<String>;
  state: () => Promise<String>;
  unitNumber: () => Promise<Int>;
  patrols: <T = FragmentableArray<Patrol>>(args?: {
    where?: PatrolWhereInput;
    orderBy?: PatrolOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Location {
  lat: Float;
  lng: Float;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  lat: () => Promise<AsyncIterator<Float>>;
  lng: () => Promise<AsyncIterator<Float>>;
}

export interface LocationNullablePromise
  extends Promise<Location | null>,
    Fragmentable {
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PatrolConnection {
  pageInfo: PageInfo;
  edges: PatrolEdge[];
}

export interface PatrolConnectionPromise
  extends Promise<PatrolConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PatrolEdge>>() => T;
  aggregate: <T = AggregatePatrolPromise>() => T;
}

export interface PatrolConnectionSubscription
  extends Promise<AsyncIterator<PatrolConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PatrolEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePatrolSubscription>() => T;
}

export interface PatrolEdge {
  node: Patrol;
  cursor: String;
}

export interface PatrolEdgePromise extends Promise<PatrolEdge>, Fragmentable {
  node: <T = PatrolPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PatrolEdgeSubscription
  extends Promise<AsyncIterator<PatrolEdge>>,
    Fragmentable {
  node: <T = PatrolSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePatrol {
  count: Int;
}

export interface AggregatePatrolPromise
  extends Promise<AggregatePatrol>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePatrolSubscription
  extends Promise<AsyncIterator<AggregatePatrol>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TroopConnection {
  pageInfo: PageInfo;
  edges: TroopEdge[];
}

export interface TroopConnectionPromise
  extends Promise<TroopConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TroopEdge>>() => T;
  aggregate: <T = AggregateTroopPromise>() => T;
}

export interface TroopConnectionSubscription
  extends Promise<AsyncIterator<TroopConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TroopEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTroopSubscription>() => T;
}

export interface TroopEdge {
  node: Troop;
  cursor: String;
}

export interface TroopEdgePromise extends Promise<TroopEdge>, Fragmentable {
  node: <T = TroopPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TroopEdgeSubscription
  extends Promise<AsyncIterator<TroopEdge>>,
    Fragmentable {
  node: <T = TroopSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTroop {
  count: Int;
}

export interface AggregateTroopPromise
  extends Promise<AggregateTroop>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTroopSubscription
  extends Promise<AsyncIterator<AggregateTroop>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventPreviousValues {
  id: ID_Output;
  type: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  description?: String;
  date?: DateTimeOutput;
  time?: DateTimeOutput;
  startDate?: DateTimeOutput;
  endDate?: DateTimeOutput;
  recurring?: Boolean;
  day?: WEEK_DAY;
  distance?: Int;
  published: Boolean;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  time: () => Promise<DateTimeOutput>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  recurring: () => Promise<Boolean>;
  day: () => Promise<WEEK_DAY>;
  distance: () => Promise<Int>;
  published: () => Promise<Boolean>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  recurring: () => Promise<AsyncIterator<Boolean>>;
  day: () => Promise<AsyncIterator<WEEK_DAY>>;
  distance: () => Promise<AsyncIterator<Int>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface LocationPreviousValues {
  lat: Float;
  lng: Float;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  lat: () => Promise<AsyncIterator<Float>>;
  lng: () => Promise<AsyncIterator<Float>>;
}

export interface PatrolSubscriptionPayload {
  mutation: MutationType;
  node: Patrol;
  updatedFields: String[];
  previousValues: PatrolPreviousValues;
}

export interface PatrolSubscriptionPayloadPromise
  extends Promise<PatrolSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PatrolPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PatrolPreviousValuesPromise>() => T;
}

export interface PatrolSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PatrolSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PatrolSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PatrolPreviousValuesSubscription>() => T;
}

export interface PatrolPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface PatrolPreviousValuesPromise
  extends Promise<PatrolPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface PatrolPreviousValuesSubscription
  extends Promise<AsyncIterator<PatrolPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface TroopSubscriptionPayload {
  mutation: MutationType;
  node: Troop;
  updatedFields: String[];
  previousValues: TroopPreviousValues;
}

export interface TroopSubscriptionPayloadPromise
  extends Promise<TroopSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TroopPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TroopPreviousValuesPromise>() => T;
}

export interface TroopSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TroopSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TroopSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TroopPreviousValuesSubscription>() => T;
}

export interface TroopPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  council: String;
  state: String;
  unitNumber?: Int;
}

export interface TroopPreviousValuesPromise
  extends Promise<TroopPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  council: () => Promise<String>;
  state: () => Promise<String>;
  unitNumber: () => Promise<Int>;
}

export interface TroopPreviousValuesSubscription
  extends Promise<AsyncIterator<TroopPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  council: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  unitNumber: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  email: String;
  password: String;
  phone?: String;
  birthday?: String;
  role?: ROLE;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  birthday: () => Promise<String>;
  role: () => Promise<ROLE>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<ROLE>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "ROLE",
    embedded: false
  },
  {
    name: "WEEK_DAY",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Troop",
    embedded: false
  },
  {
    name: "Patrol",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
