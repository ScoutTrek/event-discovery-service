# source: http://34.94.55.250:4466
# timestamp: Mon Mar 30 2020 13:04:44 GMT-0400 (Eastern Daylight Time)

type AggregateEvent {
  count: Int!
}

type AggregatePatrol {
  count: Int!
}

type AggregateTroop {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Event implements Node {
  id: ID!
  type: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  patrol: Patrol
  troop: Troop
  title: String!
  description: String
  date: DateTime
  time: DateTime
  location: Location
  meetLocation: Location
  startDate: DateTime
  endDate: DateTime
  recurring: Boolean
  day: WEEK_DAY
  distance: Int
  published: Boolean!
  owner: User!
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  type: String!
  title: String!
  description: String
  date: DateTime
  time: DateTime
  startDate: DateTime
  endDate: DateTime
  recurring: Boolean
  day: WEEK_DAY
  distance: Int
  published: Boolean
  patrol: PatrolCreateOneWithoutEventsInput
  troop: TroopCreateOneWithoutEventsInput
  location: LocationCreateOneInput
  meetLocation: LocationCreateOneInput
  owner: UserCreateOneWithoutEventsInput!
}

input EventCreateManyWithoutOwnerInput {
  create: [EventCreateWithoutOwnerInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutPatrolInput {
  create: [EventCreateWithoutPatrolInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutTroopInput {
  create: [EventCreateWithoutTroopInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutOwnerInput {
  id: ID
  type: String!
  title: String!
  description: String
  date: DateTime
  time: DateTime
  startDate: DateTime
  endDate: DateTime
  recurring: Boolean
  day: WEEK_DAY
  distance: Int
  published: Boolean
  patrol: PatrolCreateOneWithoutEventsInput
  troop: TroopCreateOneWithoutEventsInput
  location: LocationCreateOneInput
  meetLocation: LocationCreateOneInput
}

input EventCreateWithoutPatrolInput {
  id: ID
  type: String!
  title: String!
  description: String
  date: DateTime
  time: DateTime
  startDate: DateTime
  endDate: DateTime
  recurring: Boolean
  day: WEEK_DAY
  distance: Int
  published: Boolean
  troop: TroopCreateOneWithoutEventsInput
  location: LocationCreateOneInput
  meetLocation: LocationCreateOneInput
  owner: UserCreateOneWithoutEventsInput!
}

input EventCreateWithoutTroopInput {
  id: ID
  type: String!
  title: String!
  description: String
  date: DateTime
  time: DateTime
  startDate: DateTime
  endDate: DateTime
  recurring: Boolean
  day: WEEK_DAY
  distance: Int
  published: Boolean
  patrol: PatrolCreateOneWithoutEventsInput
  location: LocationCreateOneInput
  meetLocation: LocationCreateOneInput
  owner: UserCreateOneWithoutEventsInput!
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  date_ASC
  date_DESC
  time_ASC
  time_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  recurring_ASC
  recurring_DESC
  day_ASC
  day_DESC
  distance_ASC
  distance_DESC
  published_ASC
  published_DESC
}

type EventPreviousValues {
  id: ID!
  type: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String
  date: DateTime
  time: DateTime
  startDate: DateTime
  endDate: DateTime
  recurring: Boolean
  day: WEEK_DAY
  distance: Int
  published: Boolean!
}

input EventScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EventScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  time: DateTime

  """All values that are not equal to given value."""
  time_not: DateTime

  """All values that are contained in given list."""
  time_in: [DateTime!]

  """All values that are not contained in given list."""
  time_not_in: [DateTime!]

  """All values less than the given value."""
  time_lt: DateTime

  """All values less than or equal the given value."""
  time_lte: DateTime

  """All values greater than the given value."""
  time_gt: DateTime

  """All values greater than or equal the given value."""
  time_gte: DateTime
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  recurring: Boolean

  """All values that are not equal to given value."""
  recurring_not: Boolean
  day: WEEK_DAY

  """All values that are not equal to given value."""
  day_not: WEEK_DAY

  """All values that are contained in given list."""
  day_in: [WEEK_DAY!]

  """All values that are not contained in given list."""
  day_not_in: [WEEK_DAY!]
  distance: Int

  """All values that are not equal to given value."""
  distance_not: Int

  """All values that are contained in given list."""
  distance_in: [Int!]

  """All values that are not contained in given list."""
  distance_not_in: [Int!]

  """All values less than the given value."""
  distance_lt: Int

  """All values less than or equal the given value."""
  distance_lte: Int

  """All values greater than the given value."""
  distance_gt: Int

  """All values greater than or equal the given value."""
  distance_gte: Int
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  type: String
  title: String
  description: String
  date: DateTime
  time: DateTime
  startDate: DateTime
  endDate: DateTime
  recurring: Boolean
  day: WEEK_DAY
  distance: Int
  published: Boolean
  patrol: PatrolUpdateOneWithoutEventsInput
  troop: TroopUpdateOneWithoutEventsInput
  location: LocationUpdateOneInput
  meetLocation: LocationUpdateOneInput
  owner: UserUpdateOneRequiredWithoutEventsInput
}

input EventUpdateManyDataInput {
  type: String
  title: String
  description: String
  date: DateTime
  time: DateTime
  startDate: DateTime
  endDate: DateTime
  recurring: Boolean
  day: WEEK_DAY
  distance: Int
  published: Boolean
}

input EventUpdateManyMutationInput {
  type: String
  title: String
  description: String
  date: DateTime
  time: DateTime
  startDate: DateTime
  endDate: DateTime
  recurring: Boolean
  day: WEEK_DAY
  distance: Int
  published: Boolean
}

input EventUpdateManyWithoutOwnerInput {
  create: [EventCreateWithoutOwnerInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  deleteMany: [EventScalarWhereInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutOwnerInput!]
}

input EventUpdateManyWithoutPatrolInput {
  create: [EventCreateWithoutPatrolInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutPatrolInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  deleteMany: [EventScalarWhereInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutPatrolInput!]
}

input EventUpdateManyWithoutTroopInput {
  create: [EventCreateWithoutTroopInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutTroopInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  deleteMany: [EventScalarWhereInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutTroopInput!]
}

input EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyDataInput!
}

input EventUpdateWithoutOwnerDataInput {
  type: String
  title: String
  description: String
  date: DateTime
  time: DateTime
  startDate: DateTime
  endDate: DateTime
  recurring: Boolean
  day: WEEK_DAY
  distance: Int
  published: Boolean
  patrol: PatrolUpdateOneWithoutEventsInput
  troop: TroopUpdateOneWithoutEventsInput
  location: LocationUpdateOneInput
  meetLocation: LocationUpdateOneInput
}

input EventUpdateWithoutPatrolDataInput {
  type: String
  title: String
  description: String
  date: DateTime
  time: DateTime
  startDate: DateTime
  endDate: DateTime
  recurring: Boolean
  day: WEEK_DAY
  distance: Int
  published: Boolean
  troop: TroopUpdateOneWithoutEventsInput
  location: LocationUpdateOneInput
  meetLocation: LocationUpdateOneInput
  owner: UserUpdateOneRequiredWithoutEventsInput
}

input EventUpdateWithoutTroopDataInput {
  type: String
  title: String
  description: String
  date: DateTime
  time: DateTime
  startDate: DateTime
  endDate: DateTime
  recurring: Boolean
  day: WEEK_DAY
  distance: Int
  published: Boolean
  patrol: PatrolUpdateOneWithoutEventsInput
  location: LocationUpdateOneInput
  meetLocation: LocationUpdateOneInput
  owner: UserUpdateOneRequiredWithoutEventsInput
}

input EventUpdateWithWhereUniqueWithoutOwnerInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutOwnerDataInput!
}

input EventUpdateWithWhereUniqueWithoutPatrolInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutPatrolDataInput!
}

input EventUpdateWithWhereUniqueWithoutTroopInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutTroopDataInput!
}

input EventUpsertWithWhereUniqueWithoutOwnerInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutOwnerDataInput!
  create: EventCreateWithoutOwnerInput!
}

input EventUpsertWithWhereUniqueWithoutPatrolInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutPatrolDataInput!
  create: EventCreateWithoutPatrolInput!
}

input EventUpsertWithWhereUniqueWithoutTroopInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutTroopDataInput!
  create: EventCreateWithoutTroopInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  time: DateTime

  """All values that are not equal to given value."""
  time_not: DateTime

  """All values that are contained in given list."""
  time_in: [DateTime!]

  """All values that are not contained in given list."""
  time_not_in: [DateTime!]

  """All values less than the given value."""
  time_lt: DateTime

  """All values less than or equal the given value."""
  time_lte: DateTime

  """All values greater than the given value."""
  time_gt: DateTime

  """All values greater than or equal the given value."""
  time_gte: DateTime
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  recurring: Boolean

  """All values that are not equal to given value."""
  recurring_not: Boolean
  day: WEEK_DAY

  """All values that are not equal to given value."""
  day_not: WEEK_DAY

  """All values that are contained in given list."""
  day_in: [WEEK_DAY!]

  """All values that are not contained in given list."""
  day_not_in: [WEEK_DAY!]
  distance: Int

  """All values that are not equal to given value."""
  distance_not: Int

  """All values that are contained in given list."""
  distance_in: [Int!]

  """All values that are not contained in given list."""
  distance_not_in: [Int!]

  """All values less than the given value."""
  distance_lt: Int

  """All values less than or equal the given value."""
  distance_lte: Int

  """All values greater than the given value."""
  distance_gt: Int

  """All values greater than or equal the given value."""
  distance_gte: Int
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  patrol: PatrolWhereInput
  troop: TroopWhereInput
  location: LocationWhereInput
  meetLocation: LocationWhereInput
  owner: UserWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

type Location {
  lat: Float!
  lng: Float!
}

input LocationCreateInput {
  lat: Float!
  lng: Float!
}

input LocationCreateOneInput {
  create: LocationCreateInput
}

input LocationUpdateDataInput {
  lat: Float
  lng: Float
}

input LocationUpdateOneInput {
  create: LocationCreateInput
  delete: Boolean
  update: LocationUpdateDataInput
  upsert: LocationUpsertNestedInput
}

input LocationUpsertNestedInput {
  update: LocationUpdateDataInput!
  create: LocationCreateInput!
}

input LocationWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationWhereInput!]
  lat: Float

  """All values that are not equal to given value."""
  lat_not: Float

  """All values that are contained in given list."""
  lat_in: [Float!]

  """All values that are not contained in given list."""
  lat_not_in: [Float!]

  """All values less than the given value."""
  lat_lt: Float

  """All values less than or equal the given value."""
  lat_lte: Float

  """All values greater than the given value."""
  lat_gt: Float

  """All values greater than or equal the given value."""
  lat_gte: Float
  lng: Float

  """All values that are not equal to given value."""
  lng_not: Float

  """All values that are contained in given list."""
  lng_in: [Float!]

  """All values that are not contained in given list."""
  lng_not_in: [Float!]

  """All values less than the given value."""
  lng_lt: Float

  """All values less than or equal the given value."""
  lng_lte: Float

  """All values greater than the given value."""
  lng_gt: Float

  """All values greater than or equal the given value."""
  lng_gte: Float
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createEvent(data: EventCreateInput!): Event!
  createTroop(data: TroopCreateInput!): Troop!
  createPatrol(data: PatrolCreateInput!): Patrol!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateTroop(data: TroopUpdateInput!, where: TroopWhereUniqueInput!): Troop
  updatePatrol(data: PatrolUpdateInput!, where: PatrolWhereUniqueInput!): Patrol
  deleteUser(where: UserWhereUniqueInput!): User
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteTroop(where: TroopWhereUniqueInput!): Troop
  deletePatrol(where: PatrolWhereUniqueInput!): Patrol
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertTroop(where: TroopWhereUniqueInput!, create: TroopCreateInput!, update: TroopUpdateInput!): Troop!
  upsertPatrol(where: PatrolWhereUniqueInput!, create: PatrolCreateInput!, update: PatrolUpdateInput!): Patrol!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyTroops(data: TroopUpdateManyMutationInput!, where: TroopWhereInput): BatchPayload!
  updateManyPatrols(data: PatrolUpdateManyMutationInput!, where: PatrolWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyTroops(where: TroopWhereInput): BatchPayload!
  deleteManyPatrols(where: PatrolWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Patrol implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
}

"""A connection to a list of items."""
type PatrolConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PatrolEdge]!
  aggregate: AggregatePatrol!
}

input PatrolCreateInput {
  id: ID
  name: String!
  members: UserCreateManyWithoutPatrolInput
  events: EventCreateManyWithoutPatrolInput
}

input PatrolCreateManyInput {
  create: [PatrolCreateInput!]
  connect: [PatrolWhereUniqueInput!]
}

input PatrolCreateOneWithoutEventsInput {
  create: PatrolCreateWithoutEventsInput
  connect: PatrolWhereUniqueInput
}

input PatrolCreateOneWithoutMembersInput {
  create: PatrolCreateWithoutMembersInput
  connect: PatrolWhereUniqueInput
}

input PatrolCreateWithoutEventsInput {
  id: ID
  name: String!
  members: UserCreateManyWithoutPatrolInput
}

input PatrolCreateWithoutMembersInput {
  id: ID
  name: String!
  events: EventCreateManyWithoutPatrolInput
}

"""An edge in a connection."""
type PatrolEdge {
  """The item at the end of the edge."""
  node: Patrol!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PatrolOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type PatrolPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

input PatrolScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PatrolScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PatrolScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PatrolScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type PatrolSubscriptionPayload {
  mutation: MutationType!
  node: Patrol
  updatedFields: [String!]
  previousValues: PatrolPreviousValues
}

input PatrolSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PatrolSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PatrolWhereInput
}

input PatrolUpdateDataInput {
  name: String
  members: UserUpdateManyWithoutPatrolInput
  events: EventUpdateManyWithoutPatrolInput
}

input PatrolUpdateInput {
  name: String
  members: UserUpdateManyWithoutPatrolInput
  events: EventUpdateManyWithoutPatrolInput
}

input PatrolUpdateManyDataInput {
  name: String
}

input PatrolUpdateManyInput {
  create: [PatrolCreateInput!]
  connect: [PatrolWhereUniqueInput!]
  set: [PatrolWhereUniqueInput!]
  disconnect: [PatrolWhereUniqueInput!]
  delete: [PatrolWhereUniqueInput!]
  update: [PatrolUpdateWithWhereUniqueNestedInput!]
  updateMany: [PatrolUpdateManyWithWhereNestedInput!]
  deleteMany: [PatrolScalarWhereInput!]
  upsert: [PatrolUpsertWithWhereUniqueNestedInput!]
}

input PatrolUpdateManyMutationInput {
  name: String
}

input PatrolUpdateManyWithWhereNestedInput {
  where: PatrolScalarWhereInput!
  data: PatrolUpdateManyDataInput!
}

input PatrolUpdateOneWithoutEventsInput {
  create: PatrolCreateWithoutEventsInput
  connect: PatrolWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PatrolUpdateWithoutEventsDataInput
  upsert: PatrolUpsertWithoutEventsInput
}

input PatrolUpdateOneWithoutMembersInput {
  create: PatrolCreateWithoutMembersInput
  connect: PatrolWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PatrolUpdateWithoutMembersDataInput
  upsert: PatrolUpsertWithoutMembersInput
}

input PatrolUpdateWithoutEventsDataInput {
  name: String
  members: UserUpdateManyWithoutPatrolInput
}

input PatrolUpdateWithoutMembersDataInput {
  name: String
  events: EventUpdateManyWithoutPatrolInput
}

input PatrolUpdateWithWhereUniqueNestedInput {
  where: PatrolWhereUniqueInput!
  data: PatrolUpdateDataInput!
}

input PatrolUpsertWithoutEventsInput {
  update: PatrolUpdateWithoutEventsDataInput!
  create: PatrolCreateWithoutEventsInput!
}

input PatrolUpsertWithoutMembersInput {
  update: PatrolUpdateWithoutMembersDataInput!
  create: PatrolCreateWithoutMembersInput!
}

input PatrolUpsertWithWhereUniqueNestedInput {
  where: PatrolWhereUniqueInput!
  update: PatrolUpdateDataInput!
  create: PatrolCreateInput!
}

input PatrolWhereInput {
  """Logical AND on all given filters."""
  AND: [PatrolWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  members_some: UserWhereInput
  events_some: EventWhereInput
}

input PatrolWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  troops(where: TroopWhereInput, orderBy: TroopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Troop]!
  patrols(where: PatrolWhereInput, orderBy: PatrolOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Patrol]!
  user(where: UserWhereUniqueInput!): User
  event(where: EventWhereUniqueInput!): Event
  troop(where: TroopWhereUniqueInput!): Troop
  patrol(where: PatrolWhereUniqueInput!): Patrol
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  troopsConnection(where: TroopWhereInput, orderBy: TroopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TroopConnection!
  patrolsConnection(where: PatrolWhereInput, orderBy: PatrolOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PatrolConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum ROLE {
  SCOUT_MASTER
  SR_PATROL_LEADER
  PATROL_LEADER
  SCOUT
  PARENT
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  troop(where: TroopSubscriptionWhereInput): TroopSubscriptionPayload
  patrol(where: PatrolSubscriptionWhereInput): PatrolSubscriptionPayload
}

type Troop implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  council: String!
  state: String!
  unitNumber: Int
  patrols(where: PatrolWhereInput, orderBy: PatrolOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Patrol!]
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
}

"""A connection to a list of items."""
type TroopConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TroopEdge]!
  aggregate: AggregateTroop!
}

input TroopCreateInput {
  id: ID
  council: String!
  state: String!
  unitNumber: Int
  patrols: PatrolCreateManyInput
  events: EventCreateManyWithoutTroopInput
}

input TroopCreateOneInput {
  create: TroopCreateInput
  connect: TroopWhereUniqueInput
}

input TroopCreateOneWithoutEventsInput {
  create: TroopCreateWithoutEventsInput
  connect: TroopWhereUniqueInput
}

input TroopCreateWithoutEventsInput {
  id: ID
  council: String!
  state: String!
  unitNumber: Int
  patrols: PatrolCreateManyInput
}

"""An edge in a connection."""
type TroopEdge {
  """The item at the end of the edge."""
  node: Troop!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TroopOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  council_ASC
  council_DESC
  state_ASC
  state_DESC
  unitNumber_ASC
  unitNumber_DESC
}

type TroopPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  council: String!
  state: String!
  unitNumber: Int
}

type TroopSubscriptionPayload {
  mutation: MutationType!
  node: Troop
  updatedFields: [String!]
  previousValues: TroopPreviousValues
}

input TroopSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TroopSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TroopWhereInput
}

input TroopUpdateDataInput {
  council: String
  state: String
  unitNumber: Int
  patrols: PatrolUpdateManyInput
  events: EventUpdateManyWithoutTroopInput
}

input TroopUpdateInput {
  council: String
  state: String
  unitNumber: Int
  patrols: PatrolUpdateManyInput
  events: EventUpdateManyWithoutTroopInput
}

input TroopUpdateManyMutationInput {
  council: String
  state: String
  unitNumber: Int
}

input TroopUpdateOneInput {
  create: TroopCreateInput
  connect: TroopWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TroopUpdateDataInput
  upsert: TroopUpsertNestedInput
}

input TroopUpdateOneWithoutEventsInput {
  create: TroopCreateWithoutEventsInput
  connect: TroopWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TroopUpdateWithoutEventsDataInput
  upsert: TroopUpsertWithoutEventsInput
}

input TroopUpdateWithoutEventsDataInput {
  council: String
  state: String
  unitNumber: Int
  patrols: PatrolUpdateManyInput
}

input TroopUpsertNestedInput {
  update: TroopUpdateDataInput!
  create: TroopCreateInput!
}

input TroopUpsertWithoutEventsInput {
  update: TroopUpdateWithoutEventsDataInput!
  create: TroopCreateWithoutEventsInput!
}

input TroopWhereInput {
  """Logical AND on all given filters."""
  AND: [TroopWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  council: String

  """All values that are not equal to given value."""
  council_not: String

  """All values that are contained in given list."""
  council_in: [String!]

  """All values that are not contained in given list."""
  council_not_in: [String!]

  """All values less than the given value."""
  council_lt: String

  """All values less than or equal the given value."""
  council_lte: String

  """All values greater than the given value."""
  council_gt: String

  """All values greater than or equal the given value."""
  council_gte: String

  """All values containing the given string."""
  council_contains: String

  """All values not containing the given string."""
  council_not_contains: String

  """All values starting with the given string."""
  council_starts_with: String

  """All values not starting with the given string."""
  council_not_starts_with: String

  """All values ending with the given string."""
  council_ends_with: String

  """All values not ending with the given string."""
  council_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  unitNumber: Int

  """All values that are not equal to given value."""
  unitNumber_not: Int

  """All values that are contained in given list."""
  unitNumber_in: [Int!]

  """All values that are not contained in given list."""
  unitNumber_not_in: [Int!]

  """All values less than the given value."""
  unitNumber_lt: Int

  """All values less than or equal the given value."""
  unitNumber_lte: Int

  """All values greater than the given value."""
  unitNumber_gt: Int

  """All values greater than or equal the given value."""
  unitNumber_gte: Int
  patrols_some: PatrolWhereInput
  events_some: EventWhereInput
}

input TroopWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  email: String!
  password: String!
  phone: String
  birthday: String
  troop: Troop
  patrol: Patrol
  role: ROLE
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  phone: String
  birthday: String
  role: ROLE
  troop: TroopCreateOneInput
  patrol: PatrolCreateOneWithoutMembersInput
  events: EventCreateManyWithoutOwnerInput
}

input UserCreateManyWithoutPatrolInput {
  create: [UserCreateWithoutPatrolInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEventsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  phone: String
  birthday: String
  role: ROLE
  troop: TroopCreateOneInput
  patrol: PatrolCreateOneWithoutMembersInput
}

input UserCreateWithoutPatrolInput {
  id: ID
  name: String!
  email: String!
  password: String!
  phone: String
  birthday: String
  role: ROLE
  troop: TroopCreateOneInput
  events: EventCreateManyWithoutOwnerInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  phone_ASC
  phone_DESC
  birthday_ASC
  birthday_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  email: String!
  password: String!
  phone: String
  birthday: String
  role: ROLE
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  birthday: String

  """All values that are not equal to given value."""
  birthday_not: String

  """All values that are contained in given list."""
  birthday_in: [String!]

  """All values that are not contained in given list."""
  birthday_not_in: [String!]

  """All values less than the given value."""
  birthday_lt: String

  """All values less than or equal the given value."""
  birthday_lte: String

  """All values greater than the given value."""
  birthday_gt: String

  """All values greater than or equal the given value."""
  birthday_gte: String

  """All values containing the given string."""
  birthday_contains: String

  """All values not containing the given string."""
  birthday_not_contains: String

  """All values starting with the given string."""
  birthday_starts_with: String

  """All values not starting with the given string."""
  birthday_not_starts_with: String

  """All values ending with the given string."""
  birthday_ends_with: String

  """All values not ending with the given string."""
  birthday_not_ends_with: String
  role: ROLE

  """All values that are not equal to given value."""
  role_not: ROLE

  """All values that are contained in given list."""
  role_in: [ROLE!]

  """All values that are not contained in given list."""
  role_not_in: [ROLE!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  phone: String
  birthday: String
  role: ROLE
  troop: TroopUpdateOneInput
  patrol: PatrolUpdateOneWithoutMembersInput
  events: EventUpdateManyWithoutOwnerInput
}

input UserUpdateManyDataInput {
  name: String
  email: String
  password: String
  phone: String
  birthday: String
  role: ROLE
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  phone: String
  birthday: String
  role: ROLE
}

input UserUpdateManyWithoutPatrolInput {
  create: [UserCreateWithoutPatrolInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutPatrolInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutPatrolInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutEventsDataInput
  upsert: UserUpsertWithoutEventsInput
}

input UserUpdateWithoutEventsDataInput {
  name: String
  email: String
  password: String
  phone: String
  birthday: String
  role: ROLE
  troop: TroopUpdateOneInput
  patrol: PatrolUpdateOneWithoutMembersInput
}

input UserUpdateWithoutPatrolDataInput {
  name: String
  email: String
  password: String
  phone: String
  birthday: String
  role: ROLE
  troop: TroopUpdateOneInput
  events: EventUpdateManyWithoutOwnerInput
}

input UserUpdateWithWhereUniqueWithoutPatrolInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPatrolDataInput!
}

input UserUpsertWithoutEventsInput {
  update: UserUpdateWithoutEventsDataInput!
  create: UserCreateWithoutEventsInput!
}

input UserUpsertWithWhereUniqueWithoutPatrolInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPatrolDataInput!
  create: UserCreateWithoutPatrolInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  birthday: String

  """All values that are not equal to given value."""
  birthday_not: String

  """All values that are contained in given list."""
  birthday_in: [String!]

  """All values that are not contained in given list."""
  birthday_not_in: [String!]

  """All values less than the given value."""
  birthday_lt: String

  """All values less than or equal the given value."""
  birthday_lte: String

  """All values greater than the given value."""
  birthday_gt: String

  """All values greater than or equal the given value."""
  birthday_gte: String

  """All values containing the given string."""
  birthday_contains: String

  """All values not containing the given string."""
  birthday_not_contains: String

  """All values starting with the given string."""
  birthday_starts_with: String

  """All values not starting with the given string."""
  birthday_not_starts_with: String

  """All values ending with the given string."""
  birthday_ends_with: String

  """All values not ending with the given string."""
  birthday_not_ends_with: String
  role: ROLE

  """All values that are not equal to given value."""
  role_not: ROLE

  """All values that are contained in given list."""
  role_in: [ROLE!]

  """All values that are not contained in given list."""
  role_not_in: [ROLE!]
  troop: TroopWhereInput
  patrol: PatrolWhereInput
  events_some: EventWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum WEEK_DAY {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
